name: provision

on: [push]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-central-1'

jobs:
  provision-eks-with-pulumi:
    runs-on: ubuntu-latest
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    # Create an GitHub environment referencing our EKS cluster endpoint
    environment:
      name: pulumi-eks-tekton-dev
      url: ${{ steps.pulumi-up.outputs.eks_url }}
      # using outputs for providing the Pulumi created kubeconfig to subsequent jobs
      # see https://stackoverflow.com/a/61236803/4964553
      # & see https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      kubeconfig: ${{ steps.pulumi-up.outputs.kubeconfig }}
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup node env
        uses: actions/setup-node@v2.5.0
        with:
          node-version: '14'

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Pulumi dependencies before npm run generate to prevent it from breaking the build
        run: npm install
        working-directory: ./eks-deployment

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2.0.0

      - name: Provision AWS EKS cluster with Pulumi
        id: pulumi-up
        run: |
          pulumi stack select dev
          pulumi preview
          echo "lets use --suppress-outputs here in order to prevent Pulumi from logging the kubeconfig into public GitHub Action logs"
          pulumi up --yes --suppress-outputs
          echo "Create ~/.kube dir only, if not already existent (see https://stackoverflow.com/a/793867/4964553)"
          mkdir -p ~/.kube
          pulumi stack output kubeconfig > ~/.kube/config
          echo "::set-output name=kubeconfig::$(pulumi stack output kubeconfig)"
          echo "::set-output name=eks_url::$(pulumi stack output eksUrl)/api/hello"
        working-directory: ./eks-deployment

      - name: Try to connect to our EKS cluster using kubectl
        run: kubectl get nodes

  install-and-run-tekton-on-eks:
    runs-on: ubuntu-latest
    needs: provision-eks-with-pulumi
    environment:
      name: tekton-dashboard
      url: ${{ steps.dashboard-expose.outputs.dashboard_host }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      # We must use single quotes (!!!) here to access the kubeconfig like this:
      # echo '${{ needs.provision-eks-with-pulumi.outputs.kubeconfig }}' > ~/.kube/config
      # Otherwise we'll run into errors like (see https://stackoverflow.com/a/15930393/4964553):
      # "error: error loading config file "/home/runner/.kube/config": yaml: did not find expected ',' or '}'"
      - name: Configure kubeconfig to use with kubectl from provisioning job
        run: |
          mkdir ~/.kube
          echo '${{ needs.provision-eks-with-pulumi.outputs.kubeconfig }}' > ~/.kube/config
          echo "--- Checking connectivity to cluster"
          kubectl get nodes

      - name: Install Tekton Pipelines, Dashboard, Triggers
        run: |
          echo "--- Install Tekton Pipelines with alpha features enabled (see https://stackoverflow.com/a/70336211/4964553 & https://github.com/tektoncd/experimental/issues/785#issuecomment-909049989)"
          curl https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml | sed "s#stable#alpha#g" | kubectl apply -f -
          echo "--- Install Tekton Dashboard"
          kubectl apply --filename https://github.com/tektoncd/dashboard/releases/latest/download/tekton-dashboard-release.yaml
          echo "--- Install Tekton Triggers"
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/interceptors.yaml
          echo "--- Install experimental Pipeline-in-Pipelines Controller"
          kubectl apply --filename https://storage.googleapis.com/tekton-releases-nightly/pipelines-in-pipelines/latest/release.yaml

      - name: Wait for Tekton to become ready & show running Tekton pods
        run: |
          kubectl wait --for=condition=ready pod -l app=tekton-pipelines-controller --namespace tekton-pipelines
          kubectl get pods --namespace tekton-pipelines

      - name: Expose Tekton Dashboard as GitHub environment
        id: dashboard-expose
        run: |
          echo "--- Expose Tekton Dashboard via K8s Service"
          kubectl apply -f tekton-dashboard-service.yml -n tekton-pipelines
          echo "--- Wait until Loadbalancer url is present (see https://stackoverflow.com/a/70108500/4964553)"
          until kubectl get service/tekton-dashboard-external-svc-manual -n tekton-pipelines --output=jsonpath='{.status.loadBalancer}' | grep "ingress"; do : ; done
          echo "--- Create GitHub environment var"
          DASHBOARD_HOST="http://$(kubectl get service tekton-dashboard-external-svc-manual -n tekton-pipelines --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "The Tekton dashboard is accessible at $DASHBOARD_HOST - creating GitHub Environment"
          echo "::set-output name=dashboard_host::$DASHBOARD_HOST"

      - name: Install Tekton CLI
        run: |
          brew tap tektoncd/tools
          brew install tektoncd/tools/tektoncd-cli

      - name: Create Tekton Task & run it with a TaskRun
        run: |
          echo "--- Create Task"
          kubectl apply -f tekton-ci-config/task-hello-world.yaml
          echo "--- Start TaskRun"
          tkn task start hello --dry-run > taskRun-hello.yaml
          TASK_RUN_NAME=$(kubectl create -f taskRun-hello.yaml -o json | jq -r '.metadata.name')
          echo "--- Wait for TaskRun to succeed"
          kubectl wait --for=condition=SUCCEEDED=True --timeout=60s taskruns.tekton.dev/$TASK_RUN_NAME
          echo "--- Show TaskRun logs"
          tkn taskrun logs $TASK_RUN_NAME

      - name: Install Tekton Hub Tasks (git-clone, buildpacks, gitlab-set-status, maven)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/master/task/git-clone/0.4/git-clone.yaml
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/master/task/buildpacks/0.3/buildpacks.yaml
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/gitlab-set-status/0.1/gitlab-set-status.yaml
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/maven/0.2/maven.yaml

      - name: Create Container Registry Secret & apply buildpacks PVC, ServiceAccount & Pipeline
        run: |
          echo "--- Create Secret to access GitLab Container Registry"
          kubectl create secret docker-registry docker-user-pass \
              --docker-server=registry.gitlab.com \
              --docker-username=${{ secrets.GITLAB_CR_USER }} \
              --docker-password=${{ secrets.GITLAB_CR_PASSWORD }} \
              --namespace default \
              --save-config --dry-run=client -o yaml | kubectl apply -f -
          echo "--- apply  buildpacks PVC, ServiceAccount & Pipeline"
          kubectl apply -f tekton-ci-config/resources.yml -f tekton-ci-config/gitlab-cr-service-account.yml -f tekton-ci-config/pipeline.yml
          echo "--- Insert Tekton dashboard url into generic-gitlab-set-status Pipeline config and apply it (see https://stackoverflow.com/a/70152914/4964553)"
          TEKTON_DASHBOARD_HOST="${{ steps.dashboard-expose.outputs.dashboard_host }}"
          sed "s#{{TEKTON_DASHBOARD_HOST}}#$TEKTON_DASHBOARD_HOST#g" tekton-ci-config/generic-gitlab-set-status.yml | kubectl apply -f -

      - name: Run Tekton Buildpacks powered Pipeline by creating PipelineRun
        run: |
          echo "--- Trigger PipelineRun in Tekton / K8s"
          PIPELINE_RUN_NAME=$(kubectl create -f tekton-ci-config/pipeline-run.yml --output=jsonpath='{.metadata.name}')

          echo "--- Show Tekton PipelineRun logs"
          tkn pipelinerun logs $PIPELINE_RUN_NAME --follow

          echo "--- Check if Tekton PipelineRun Failed & exit GitLab Pipeline accordingly"
          kubectl get pipelineruns $PIPELINE_RUN_NAME --output=jsonpath='{.status.conditions[*].reason}' | grep Failed && exit 1 || exit 0

      - name: Create Tekton Triggers EventListener, Trigger Secret, ServiceAccount/RoleBinding/ClusterRoleBinding
        run: |
          kubectl apply -f tekton-ci-config/triggers/serviceaccount-rb-crb.yml
          kubectl apply -f tekton-ci-config/triggers/tekton-trigger-secret.yml
          kubectl apply -f tekton-ci-config/triggers/gitlab-push-listener.yml

      - name: Create gitlab.com api token secret for Tekton Pipeline status reports
        run: |
          echo "--- Create Secret to access gitlab.com api"
          kubectl create secret generic gitlab-api-secret \
              --from-literal=token=${{ secrets.GITLAB_API_TOKEN }} \
              --namespace default \
              --save-config --dry-run=client -o yaml | kubectl apply -f -

      - name: Expose Tekton Triggers EventListener via Ingress & testdrive Trigger
        run: |
          echo "--- Deploy Nginx Ingress Controller"
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.34.1/deploy/static/provider/cloud/deploy.yaml
          echo "--- Apply Tekton EventListener Ingress"
          kubectl apply -f tekton-ci-config/triggers/tekton-eventlistener-ingress.yml
          echo "--- Get Ingress host name"
          TEKTON_EVENTLISTENER_INGRESS_HOST="http://$(kubectl get ingress tekton-eventlistener-ingress --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
          echo "Our EventListener's hostname is $TEKTON_EVENTLISTENER_INGRESS_HOST"
          echo "--- Testdrive Trigger via curl"
          curl -v \
          -H 'X-GitLab-Token: 1234567' \
          -H 'X-Gitlab-Event: Push Hook' \
          -H 'Content-Type: application/json' \
          --data-binary "@tekton-ci-config/triggers/gitlab-push-test-event.json" \
          $TEKTON_EVENTLISTENER_INGRESS_HOST

