name: provision

on: [push]

jobs:
  provision-aws-eks:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      AWS_DEFAULT_REGION: 'eu-central-1'
    # Create an GitHub environment referencing our EKS cluster endpoint
    environment:
      name: pulumi-eks-tekton-dev
      url: ${{ steps.pulumi-up.outputs.eks_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup node env
        uses: actions/setup-node@v2.4.1
        with:
          node-version: '14'

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Pulumi dependencies before npm run generate to prevent it from breaking the build
        run: npm install
        working-directory: ./eks-deployment

      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2.0.0

      - name: Provision AWS EKS cluster with Pulumi
        id: pulumi-up
        run: |
          pulumi stack select dev
          pulumi preview
          echo "lets use --suppress-outputs here in order to prevent Pulumi from logging the kubeconfig into public GitHub Action logs"
          pulumi up --yes --suppress-outputs
          mkdir ~/.kube
          pulumi stack output kubeconfig > ~/.kube/config
          echo "::set-output name=eks_url::$(pulumi stack output eksUrl)/api/hello"
        working-directory: ./eks-deployment

      - name: Try to connect to our EKS cluster using kubectl
        run: kubectl get nodes

      - name: Install Tekton Pipelines, Dashboard, Triggers
        run: |
          echo "--- Install Tekton Pipelines"
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
          echo "--- Install Tekton Dashboard"
          kubectl apply --filename https://github.com/tektoncd/dashboard/releases/latest/download/tekton-dashboard-release.yaml
          echo "--- Install Tekton Triggers"
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/triggers/latest/interceptors.yaml

      - name: Wait for Tekton to become ready & show running Tekton pods
        run: |
          kubectl wait --for=condition=ready pod -l app=tekton-pipelines-controller --namespace tekton-pipelines
          kubectl get pods --namespace tekton-pipelines

      - name: Install Tekton CLI & jq
        run: |
          brew tap tektoncd/tools
          brew install tektoncd/tools/tektoncd-cli
          brew install jq

      - name: Create Tekton Task & run it with a TaskRun
        run: |
          echo "--- Create Task"
          kubectl apply -f tekton-ci-config/task-hello-world.yaml
          echo "--- Start TaskRun"
          tkn task start hello --dry-run > taskRun-hello.yaml
          TASK_RUN_NAME=$(kubectl create -f taskRun-hello.yaml -o json | jq -r '.metadata.name')
          echo "--- Wait for TaskRun to succeed"
          kubectl wait --for=condition=SUCCEEDED=True --timeout=60s taskruns.tekton.dev/$TASK_RUN_NAME
          echo "--- Show TaskRun logs"
          tkn taskrun logs $TASK_RUN_NAME

      - name: Install git-clone & buildpacks Task
        run: |
          echo "--- Install git-clone and buildpacks Task"
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/master/task/git-clone/0.4/git-clone.yaml
          kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/master/task/buildpacks/0.3/buildpacks.yaml

      - name: Create Container Registry Secret & apply buildpacks PVC, ServiceAccount & Pipeline
        run: |
          echo "--- Create Secret to access GitLab Container Registry"
          kubectl create secret docker-registry docker-user-pass \
              --docker-server=registry.gitlab.com \
              --docker-username=${{ secrets.GITLAB_CR_USER }} \
              --docker-password=${{ secrets.GITLAB_CR_PASSWORD }} \
              --namespace default
          echo "--- apply  buildpacks PVC, ServiceAccount & Pipeline"
          kubectl apply -f tekton-ci-config/resources.yml -f tekton-ci-config/gitlab-cr-service-account.yml -f tekton-ci-config/pipeline.yml

      - name: Run Tekton Buildpacks powered Pipeline by creating PipelineRun
        run: |
          echo "--- Create PipelineRun"
          PIPELINE_RUN_NAME=$(kubectl create -f tekton-ci-config/pipeline-run.yml -o json | jq -r '.metadata.name')
          echo "--- Wait for PipelineRun to succeed"
          kubectl wait --for=condition=SUCCEEDED=True --timeout=60s pipelineruns.tekton.dev/$PIPELINE_RUN_NAME
          echo "--- Show PipelineRun logs"
          tkn taskrun logs $PIPELINE_RUN_NAME